From d527c860f5a3f0ed687bd03f0cb464612dc23408 Mon Sep 17 00:00:00 2001
From: Florian Weimer <fweimer@redhat.com>
Date: Tue, 27 Nov 2018 16:12:43 +0100
Subject: [PATCH] CVE-2018-19591: if_nametoindex: Fix descriptor for overlong
 name [BZ #23927]

---
 ChangeLog                          |    7 +++++++
 NEWS                               |    4 +++-
 sysdeps/unix/sysv/linux/if_index.c |   11 ++++++-----
 3 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 9bf877e..086cbd4 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2018-11-27  Florian Weimer  <fweimer@redhat.com>
+
+	[BZ #23927]
+	CVE-2018-19591
+	* sysdeps/unix/sysv/linux/if_index.c (__if_nametoindex): Avoid
+	descriptor leak in case of ENODEV error.
+
 2018-09-30  Martin Jansa  <Martin.Jansa@gmail.com>
 	Partial fix for [BZ #23716]
 	* locale/weight.h: Fix build with -Os.
diff --git a/NEWS b/NEWS
index f488821..1098be1 100644
--- a/NEWS
+++ b/NEWS
@@ -238,6 +238,10 @@ Changes to build and runtime requirement
 
 Security related changes:
 
+  CVE-2018-19591: A file descriptor leak in if_nametoindex can lead to a
+  denial of service due to resource exhaustion when processing getaddrinfo
+  calls with crafted host names.  Reported by Guido Vranken.
+
   CVE-2016-6261, CVE-2016-6263, CVE-2017-14062: Various vulnerabilities have
   been fixed by removing the glibc-internal IDNA implementation and using
   the system-provided libidn2 library instead.  Originally reported by Hanno
diff --git a/sysdeps/unix/sysv/linux/if_index.c b/sysdeps/unix/sysv/linux/if_index.c
index e3d0898..782fc5e 100644
--- a/sysdeps/unix/sysv/linux/if_index.c
+++ b/sysdeps/unix/sysv/linux/if_index.c
@@ -38,11 +38,6 @@ __if_nametoindex (const char *ifname)
   return 0;
 #else
   struct ifreq ifr;
-  int fd = __opensock ();
-
-  if (fd < 0)
-    return 0;
-
   if (strlen (ifname) >= IFNAMSIZ)
     {
       __set_errno (ENODEV);
@@ -50,6 +45,12 @@ __if_nametoindex (const char *ifname)
     }
 
   strncpy (ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
+
+  int fd = __opensock ();
+
+  if (fd < 0)
+    return 0;
+
   if (__ioctl (fd, SIOCGIFINDEX, &ifr) < 0)
     {
       int saved_errno = errno;
-- 
1.7.9.5

