From 78b87d7361fbd54ec2b4bd6890938cb4e84fbcd8 Mon Sep 17 00:00:00 2001
From: De Huo <De.Huo@windriver.com>
Date: Mon, 6 May 2019 18:36:11 +0800
Subject: [PATCH] Fix CVE-2019-9948

the patch comes from:
https://github.com/python/cpython/pull/11842/commits/8f99cc799e4393bf1112b9395b2342f81b3f45ef

The urllib in Python 2.x through 2.7.16 supports the local_file: scheme, 
which makes it easier for remote attackers to bypass protection mechanisms that blacklist file: URIs,
 as demonstrated by triggering a urllib.urlopen('local_file:///etc/passwd') call.

Avoid file reading as disallowing the unnecessary URL scheme in urllib.

Upstream-Status: Backport
CVE: CVE-2019-9948

Signed-off-by: De Huo <De.Huo@windriver.com>
---
 Lib/test/test_urllib.py |   12 ++++++++++++
 Lib/urllib.py           |    5 ++++-
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/Lib/test/test_urllib.py b/Lib/test/test_urllib.py
index d58d516..e4816f5 100644
--- a/Lib/test/test_urllib.py
+++ b/Lib/test/test_urllib.py
@@ -835,6 +835,18 @@ class URLopener_Tests(unittest.TestCase):
             "spam://c:|windows%/:=&?~#+!$,;'@()*[]|/path/"),
             "//c:|windows%/:=&?~#+!$,;'@()*[]|/path/")
 
+    def test_local_file_open(self):
+        class DummyURLopener(urllib.URLopener):
+            def open_local_file(self, url):
+                return url
+        self.assertEqual(DummyURLopener().open(
+            'local-file://example'), '//example')
+        self.assertEqual(DummyURLopener().open(
+            'local_file://example'), '//example')
+        self.assertRaises(IOError, urllib.urlopen,
+            'local-file://example')
+        self.assertRaises(IOError, urllib.urlopen,
+            'local_file://example')
 
 # Just commented them out.
 # Can't really tell why keep failing in windows and sparc.
diff --git a/Lib/urllib.py b/Lib/urllib.py
index 096f88a..ba4c5ac 100644
--- a/Lib/urllib.py
+++ b/Lib/urllib.py
@@ -197,7 +197,10 @@ class URLopener:
         name = 'open_' + urltype
         self.type = urltype
         name = name.replace('-', '_')
-        if not hasattr(self, name):
+
+        # bpo-35907: # disallow the file reading with the type not allowed
+        if not hasattr(self, name) or \
+            (self == _urlopener and name == 'open_local_file'):
             if proxy:
                 return self.open_unknown_proxy(proxy, fullurl, data)
             else:
-- 
1.7.9.5

